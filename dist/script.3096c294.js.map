{"version":3,"sources":["script.js"],"names":["aPlaceToShow","document","getElementById","addTask","$taskName","$dueDate","$eta","$completionTime","$priority","$completionStatus","task","taskName","dueDate","eta","completionTime","priority","completionStatus","console","log","JSON","stringify","taskList","push","button","renderTask","createElement","addEventListener","value","options","priorityInput","selectedIndex","innerHTML","forEach","taskDiv","setAttribute","taskText","textContent","appendChild"],"mappings":";AAsCA,IAAIA,EAAeC,SAASC,eAAe,YAI3C,SAASC,EAAQC,EAAWC,EAAUC,EAAMC,EAAiBC,EAAWC,GAClEC,IAAAA,EAAO,CACTC,SAAUP,EACVQ,QAASP,EACTQ,IAAKP,EACLQ,eAAgBP,EAChBQ,SAAUP,EACVQ,iBAAkBP,GAEpBQ,QAAQC,IAAIC,KAAKC,UAAUV,IAC3BW,SAASC,KAAKZ,GAZhBW,SAAW,GAqBXJ,QAAQC,IAAIC,KAAKC,UAAUC,WAI3B,IAAIE,EAAStB,SAASC,eAAe,mBA6BrC,SAASsB,EAAWd,GAEPT,SAASwB,cA7BtBF,EAAOG,iBAAiB,QAAS,WAMjCvB,EALkBF,SAASC,eAAe,YAAYyB,MACrC1B,SAASC,eAAe,WAAWyB,MACvC1B,SAASC,eAAe,YAAYyB,MACzB1B,SAASC,eAAe,uBAAuByB,MACrD1B,SAASC,eAAe,iBAAiB0B,QAAQC,cAAcC,eAAeH,OAGhGV,QAAQC,IAAIC,KAAKC,UAAUC,WAE3BrB,EAAa+B,UAAY,GAExBV,SAASW,QAAQ,SAAStB,GACxBO,QAAQC,IAAIR,EAAKC,UACbsB,IAAAA,EAAWhC,SAASwB,cAAc,OACtCQ,EAAQC,aAAa,QAAQ,QAEzBC,IAAAA,EAAWlC,SAASwB,cAAc,MACtCU,EAASC,YAAc1B,EAAKC,SAC5BsB,EAAQI,YAAYF,GAEpBnC,EAAaqC,YAAYJ","file":"script.3096c294.js","sourceRoot":"..\\public","sourcesContent":["//method 1\n/*function reverseString(str) {\n  var newString = \"\";\n  for(var i = str.length - 1; i >= 0; i--) {\n    newString += str[i];\n  }\n  return newString;\n}*/\n\n\n\n/*let r=0;\nfunction reverseString(str) {\n  for (var s= str.length - 1; s >= 0; s--) {\n    str[r] = str[s]; \n    //values r, t and s are assigned values s, t, and r\n    r++;\n\n    return str;\n\n  }\n}*/\n\n\n/*var task = {\n  dueDate:\n  priority:\n  eta:\n  completionStatus:\n}*/\n\n//PART 3\n/*\n3.1 Create an array called taskList. \n\n3.2 Then write a function called addTask() which has all the required input parameters to create a task object, before adding it to the taskList array.\n\n Log this array out to the console, showing that it works for a single task, with hard-coded input parameters. Next week we will look at how to populate these parameters with user input.*/\nlet aPlaceToShow = document.getElementById(\"allTasks\");\n\ntaskList = []; //3.1\n\nfunction addTask($taskName, $dueDate, $eta, $completionTime, $priority, $completionStatus) {\n  var task = {\n    taskName: $taskName,\n    dueDate: $dueDate,\n    eta: $eta,\n    completionTime: $completionTime,\n    priority: $priority,\n    completionStatus: $completionStatus\n  }\n  console.log(JSON.stringify(task));\n  taskList.push(task);\n}\n\n/*\naddTask(\"30/03/2020\",1,\"6 days\",\"50%\");\naddTask(\"1/04/2020\",2,\"7 days\",\"30%\");\naddTask(\"3/04/2020\",3,\"9 days\",\"20%\");\n*/\n\nconsole.log(JSON.stringify(taskList));\n\n// Submit Button Event Listener\n\nlet button = document.getElementById(\"submitTaskPress\");\n\nbutton.addEventListener(\"click\", function() {\n  let $taskName = document.getElementById(\"taskName\").value;\n  let $dueDate = document.getElementById(\"dueDate\").value;\n  let $eta = document.getElementById(\"etaInput\").value;\n  let $completionTime = document.getElementById(\"completionTimeInput\").value;\n  let $priority = document.getElementById(\"priorityInput\").options[priorityInput.selectedIndex].value; \naddTask($taskName, $dueDate, $eta, $completionTime, $priority);\n\nconsole.log(JSON.stringify(taskList));\n\naPlaceToShow.innerHTML = \"\";\n\n taskList.forEach(function(task){\n   console.log(task.taskName);\n   let taskDiv =  document.createElement('div');\n   taskDiv.setAttribute('class','card');\n\n   let taskText = document.createElement('h3');\n   taskText.textContent = task.taskName;\n   taskDiv.appendChild(taskText);\n\n   aPlaceToShow.appendChild(taskDiv);\n\n });\n\n});\n\nfunction renderTask(task){\n  //Create HTML elements\n  let item = document.createElement\n\n\n  //Extra task DOM elements\n\n  //Event Listeners for DOM elements\n\n  //Clear the input form\n\n\n}"]}